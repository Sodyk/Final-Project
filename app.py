{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "9a51b774-b16b-4c72-95a4-0c152938c613",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\boqij\\AppData\\Local\\Temp\\ipykernel_10752\\2328836900.py:91: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)\n",
      "  rug = session.query(Rug).get(rug_id)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1425x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import ttk, filedialog\n",
    "from database import add_rug, session, Rug, Customer\n",
    "import datetime\n",
    "from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\n",
    "import matplotlib.pyplot as plt\n",
    "from tkcalendar import DateEntry\n",
    "from tkinter import messagebox\n",
    "\n",
    "class MainWindow:\n",
    "    def __init__(self, root):\n",
    "        self.root = root\n",
    "        self.root.title(\"Rug Store Tracker\")\n",
    "\n",
    "       \n",
    "        columns = (\"Customer\", \"Type\", \"Size\", \"Due Date\", \"Status\", \"Price\", \"Photo\")\n",
    "        self.tree = ttk.Treeview(root, columns=columns, show=\"headings\")\n",
    "        self.tree.heading(\"Customer\", text=\"Customer\")\n",
    "        self.tree.heading(\"Type\", text=\"Type\")\n",
    "        self.tree.heading(\"Size\", text=\"Size\")\n",
    "        self.tree.heading(\"Due Date\", text=\"Due Date\")\n",
    "        self.tree.heading(\"Status\", text=\"Status\")\n",
    "        self.tree.heading(\"Price\", text=\"Price ($)\")\n",
    "        self.tree.heading(\"Photo\", text=\"Photo\")\n",
    "        self.tree.pack(fill=tk.BOTH, expand=True)\n",
    "\n",
    "       \n",
    "        self.tree.bind(\"<Double-1>\", self.on_treeview_double_click)\n",
    "        \n",
    "        tk.Button(root, text=\"Add New Job\", command=self.open_input_form).pack(side=tk.LEFT)\n",
    "        tk.Button(root, text=\"Refresh\", command=self.load_jobs).pack(side=tk.LEFT)\n",
    "        tk.Button(root, text=\"Show Income and Job Trends\", command=self.show_graphs).pack(side=tk.LEFT)\n",
    "\n",
    "        self.create_search_frame()\n",
    "        self.load_jobs()\n",
    "        \n",
    "       \n",
    "    def open_analytics_window(self):\n",
    "        AnalyticsWindow(self)\n",
    "    \n",
    "    def open_input_form(self):\n",
    "        InputForm(self)\n",
    "\n",
    "    def load_jobs(self):\n",
    "        \n",
    "        for row in self.tree.get_children():\n",
    "            self.tree.delete(row)\n",
    "\n",
    "      \n",
    "        jobs = session.query(Rug).all()\n",
    "        color = {\"Not Ready\": \"gray\", \"Cleaning\": \"blue\", \"Ready\": \"green\"}\n",
    "        for job in jobs:\n",
    "            self.tree.insert(\"\", \"end\", text=job.id, values=(\n",
    "                job.customer.name,\n",
    "                job.type,\n",
    "                job.size,\n",
    "                job.due_date,\n",
    "                job.status,\n",
    "                job.price,\n",
    "                job.photo_path\n",
    "            ), tags=(color,))\n",
    "        self.tree.tag_configure(\"gray\", foreground=\"gray\")\n",
    "        self.tree.tag_configure(\"blue\", foreground=\"blue\")\n",
    "        self.tree.tag_configure(\"green\", foreground=\"green\")\n",
    "        \n",
    "    def create_search_frame(self):\n",
    "        search_frame = ttk.LabelFrame(self.root, text=\"Search by Customer\", padding=10)\n",
    "        search_frame.pack(fill=tk.X, pady=10)\n",
    "\n",
    "        ttk.Label(search_frame, text=\"Customer Name:\").pack(side=tk.LEFT, padx=5)\n",
    "        self.search_var = tk.StringVar()\n",
    "        ttk.Entry(search_frame, textvariable=self.search_var).pack(side=tk.LEFT, padx=5)\n",
    "\n",
    "        search_button = ttk.Button(search_frame, text=\"Search\", command=self.search_by_customer)\n",
    "        search_button.pack(side=tk.LEFT, padx=10)\n",
    "\n",
    "    def search_by_customer(self):\n",
    "        customer_name = self.search_var.get()\n",
    "        customers = session.query(Customer).filter(Customer.name.ilike(f\"%{customer_name}%\")).all()\n",
    "        rugs = [rug for customer in customers for rug in customer.rugs]\n",
    "        self.update_jobs_table(rugs)\n",
    "\n",
    "    def on_treeview_double_click(self, event):\n",
    "        selected_item = self.tree.selection()\n",
    "        if selected_item:\n",
    "            item = self.tree.item(selected_item)\n",
    "            rug_id = item[\"text\"]\n",
    "            self.open_status_editor(rug_id)\n",
    "\n",
    "    def open_status_editor(self, rug_id):\n",
    "        rug = session.query(Rug).get(rug_id)\n",
    "        if not rug:\n",
    "            messagebox.showerror(\"Error\", \"Rug not found!\")\n",
    "            return\n",
    "\n",
    "        editor_window = tk.Toplevel(self.root)\n",
    "        editor_window.title(\"Update Status\")\n",
    "\n",
    "        ttk.Label(editor_window, text=f\"Updating Status for Rug ID: {rug_id}\").pack(pady=10)\n",
    "\n",
    "        status_var = tk.StringVar(value=rug.status)\n",
    "        status_dropdown = ttk.Combobox(\n",
    "            editor_window,\n",
    "            textvariable=status_var,\n",
    "            values=[\"Not Ready\", \"Cleaning\", \"Ready\"],\n",
    "            state=\"readonly\"\n",
    "        )\n",
    "        status_dropdown.pack(pady=10)\n",
    "\n",
    "        def save_status():\n",
    "            rug.status = status_var.get()\n",
    "            session.commit()\n",
    "            self.load_jobs()\n",
    "            editor_window.destroy()\n",
    "\n",
    "        ttk.Button(editor_window, text=\"Save\", command=save_status).pack(pady=10)\n",
    "\n",
    "  \n",
    "    def update_jobs_table(self, jobs):\n",
    "        for row in self.tree.get_children():\n",
    "            self.tree.delete(row)\n",
    "\n",
    "        for job in jobs:\n",
    "            color = {\"Not Ready\": \"gray\", \"Cleaning\": \"blue\", \"Ready\": \"green\"}.get(job.status, \"black\")\n",
    "            self.tree.insert(\"\", \"end\", text=job.id, values=(\n",
    "                job.customer.name,\n",
    "                job.type,\n",
    "                job.size,\n",
    "                job.due_date,\n",
    "                job.status,\n",
    "                job.price,\n",
    "                job.photo_path\n",
    "            ), tags=(color,))\n",
    "        \n",
    "        self.tree.tag_configure(\"gray\", foreground=\"gray\")\n",
    "        self.tree.tag_configure(\"blue\", foreground=\"blue\")\n",
    "        self.tree.tag_configure(\"green\", foreground=\"green\")\n",
    "\n",
    "    def show_graphs(self):\n",
    "     \n",
    "        jobs = session.query(Rug).all()\n",
    "\n",
    " \n",
    "        data = {}\n",
    "        for job in jobs:\n",
    "            date = job.due_date\n",
    "            if date not in data:\n",
    "                data[date] = {\"income\": 0, \"job_count\": 0}\n",
    "            data[date][\"income\"] += job.price\n",
    "            data[date][\"job_count\"] += 1\n",
    "\n",
    "        dates = sorted(data.keys())\n",
    "        incomes = [data[date][\"income\"] for date in dates]\n",
    "        job_counts = [data[date][\"job_count\"] for date in dates]\n",
    "\n",
    "    \n",
    "        graph_window = tk.Toplevel(self.root)\n",
    "        graph_window.title(\"Income and Job Trends\")\n",
    "\n",
    "      \n",
    "        figure, axes = plt.subplots(2, 1, figsize=(8, 6), sharex=True)\n",
    "\n",
    "       \n",
    "        axes[0].plot(dates, incomes, marker='o', color='green')\n",
    "        axes[0].set_title(\"Income Per Day\")\n",
    "        axes[0].set_ylabel(\"Income ($)\")\n",
    "        axes[0].grid(True)\n",
    "\n",
    "      \n",
    "        axes[1].plot(dates, job_counts, marker='o', color='blue')\n",
    "        axes[1].set_title(\"Number of Jobs Per Day\")\n",
    "        axes[1].set_xlabel(\"Date\")\n",
    "        axes[1].set_ylabel(\"Number of Jobs\")\n",
    "        axes[1].grid(True)\n",
    "\n",
    "       \n",
    "        canvas = FigureCanvasTkAgg(figure, master=graph_window)\n",
    "        canvas.draw()\n",
    "        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)\n",
    "\n",
    "     \n",
    "        tk.Button(graph_window, text=\"Close\", command=graph_window.destroy).pack(pady=10)\n",
    "\n",
    "\n",
    "class InputForm:\n",
    "    def __init__(self, main_window):\n",
    "        self.main_window = main_window\n",
    "\n",
    "       \n",
    "        self.window = tk.Toplevel(main_window.root)\n",
    "        self.window.title(\"Add New Job\")\n",
    "\n",
    "     \n",
    "        tk.Label(self.window, text=\"Customer Name\").grid(row=0, column=0)\n",
    "        self.customer_name = tk.Entry(self.window)\n",
    "        self.customer_name.grid(row=0, column=1)\n",
    "\n",
    "        tk.Label(self.window, text=\"Contact Info\").grid(row=1, column=0)\n",
    "        self.contact_info = tk.Entry(self.window)\n",
    "        self.contact_info.grid(row=1, column=1)\n",
    "\n",
    "        tk.Label(self.window, text=\"Rug Type\").grid(row=2, column=0)\n",
    "        self.rug_type = tk.Entry(self.window)\n",
    "        self.rug_type.grid(row=2, column=1)\n",
    "\n",
    "        tk.Label(self.window, text=\"Size\").grid(row=3, column=0)\n",
    "        self.size = tk.Entry(self.window)\n",
    "        self.size.grid(row=3, column=1)\n",
    "\n",
    "        tk.Label(self.window, text=\"Price\").grid(row=4, column=0)\n",
    "        self.price = tk.Entry(self.window)\n",
    "        self.price.grid(row=4, column=1)\n",
    "\n",
    "        tk.Label(self.window, text=\"Received Date (YYYY-MM-DD)\").grid(row=5, column=0)\n",
    "        self.received_date = tk.Entry(self.window)\n",
    "        self.received_date.grid(row=5, column=1)\n",
    "\n",
    "        tk.Label(self.window, text=\"Due Date (YYYY-MM-DD)\").grid(row=6, column=0)\n",
    "        self.due_date = tk.Entry(self.window)\n",
    "        self.due_date.grid(row=6, column=1)\n",
    "\n",
    "        tk.Label(self.window, text=\"Photo (Optional)\").grid(row=7, column=0)\n",
    "        self.photo_path = tk.Entry(self.window)\n",
    "        self.photo_path.grid(row=7, column=1)\n",
    "        tk.Button(self.window, text=\"Browse\", command=self.browse_photo).grid(row=7, column=2)\n",
    "\n",
    "        tk.Button(self.window, text=\"Add Job\", command=self.add_job).grid(row=8, column=0, columnspan=2)\n",
    "\n",
    "    def browse_photo(self):\n",
    "        file_path = filedialog.askopenfilename(filetypes=[(\"Image Files\", \"*.jpg *.png\")])\n",
    "        self.photo_path.insert(0, file_path)\n",
    "\n",
    "    def add_job(self):\n",
    "      \n",
    "        add_rug(\n",
    "            customer_name=self.customer_name.get(),\n",
    "            contact_info=self.contact_info.get(),\n",
    "            rug_type=self.rug_type.get(),\n",
    "            size=self.size.get(),\n",
    "            price=float(self.price.get()),\n",
    "            received_date=datetime.datetime.strptime(self.received_date.get(), \"%Y-%m-%d\").date(),\n",
    "            due_date=datetime.datetime.strptime(self.due_date.get(), \"%Y-%m-%d\").date(),\n",
    "            photo_path=self.photo_path.get() if self.photo_path.get() else None\n",
    "        )\n",
    "        self.main_window.load_jobs()\n",
    "        self.window.destroy()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    root = tk.Tk()\n",
    "    app = MainWindow(root)\n",
    "    root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f5b4c67-3be8-4992-bde6-eb0f610f21a2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
